// Generated by CoffeeScript 1.6.3
(function() {
  var Substitute, User, async, mongoose, querystring, request, substitutionObject, _;

  console.log("fire substitution!");

  User = require('../../models/lib/user');

  request = require('request');

  async = require('async');

  mongoose = require('mongoose');

  querystring = require('querystring');

  _ = require('underscore');

  Substitute = require('./../../models/lib/mongodb.js').Substitute;

  substitutionObject = {};

  module.exports = function(io) {
    var findSubstitutes, getSubObj, objectToRender;
    objectToRender = {
      q: "sdf"
    };
    getSubObj = function(substitutes) {
      var item, mappedQty, ratio, substitute, substituteArray, _i, _len;
      substituteArray = [];
      for (_i = 0, _len = substitutes.length; _i < _len; _i++) {
        substitute = substitutes[_i];
        substitute['non-vegan-qty'];
        mappedQty = _.map(substitute['substitute-qty'], function(num) {
          if (typeof num === String) {
            return Number(num);
          }
        });
        ratio = _.map(mappedQty, function(num) {
          return num / substitute['non-vegan-qty'];
        });
        item = {
          nonVegan: {
            item: substitute['non-vegan-item'],
            units: substitute['non-vegan-units'],
            qty: substitute['non-vegan-qty']
          },
          vegan: {
            items: substitute['vegan-substitute'],
            units: substitute['substitute-units'],
            qty: mappedQty,
            notes: substitute['substitute-description']
          },
          ratio: ratio
        };
        substituteArray.push(item);
        console.log("obj", item);
      }
      return substitutionObject = {
        q: substituteArray
      };
    };
    findSubstitutes = function() {
      return Substitute.find({}, function(err, substitutes) {
        if (err) {
          return console.log('ERROR');
        } else {
          return getSubObj(substitutes);
        }
      });
    };
    findSubstitutes();
    io.sockets.on('connection', function(socket) {
      socket.on('requestparams', function(dataFromClient) {
        var val;
        console.log("HERRERERE");
        val = querystring.parse(dataFromClient);
        console.log("val::::", val);
        return Substitute.find({
          'non-vegan-item': val.item
        }, function(err, databaseItem) {
          socket.emit('sendparams', databaseItem);
          return console.log(databaseItem);
        });
      });
      return socket.emit('rendersubs', substitutionObject);
    });
    return {
      index: function(req, res) {
        return res.render('substitution.jade', substitutionObject);
      }
    };
  };

}).call(this);
