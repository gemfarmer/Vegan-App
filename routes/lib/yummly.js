// Generated by CoffeeScript 1.6.3
(function() {
  var User, async, mongoose, request;

  console.log("fire yummly!");

  User = require('../../models/lib/user');

  request = require('request');

  async = require('async');

  mongoose = require('mongoose');

  module.exports = function(req, res) {
    var credentialKey, credentials, getMetaData, getRecipeData, searchMetaParam, searchRecipes, tasks;
    searchMetaParam = {
      allergy: 'allergy',
      diet: 'diet',
      cuisine: 'cuisine',
      course: 'course'
    };
    credentials = {
      yummlyAppId: '48b32423',
      yummlyAppKey: "f801fe2eacf40c98299940e2824de106"
    };
    credentialKey = "_app_id=" + credentials.yummlyAppId + "&_app_key=" + credentials.yummlyAppKey;
    console.log("credentialKey", credentialKey);
    getMetaData = function(param, callback) {
      var yummlyUrl;
      yummlyUrl = "http://api.yummly.com/v1/api/metadata/" + param + "?" + credentialKey;
      console.log("yummlyUrl", yummlyUrl);
      return request(yummlyUrl, function(error, response, body) {
        var data;
        data = body.replace("set_metadata('" + param + "',", '').replace(');', '');
        return callback(null, JSON.parse(data));
      });
    };
    searchRecipes = function() {};
    getRecipeData = function(callback) {
      var yummlyQUrl;
      yummlyQUrl = "http://api.yummly.com/v1/api/recipes?" + credentialKey;
      console.log(yummlyQUrl);
      return request(yummlyQUrl, function(error, response, body) {
        var yummlyObj;
        yummlyObj = JSON.parse(body);
        callback(null, yummlyObj);
      });
    };
    tasks = [
      function(cb) {
        var toRender;
        toRender = {
          title: 'Veganizzm App'
        };
        return getMetaData(searchMetaParam.cuisine, function(err, data) {
          toRender.allowedCuisine = data;
          return cb(null, toRender);
        });
      }, function(toRender, cb) {
        return getMetaData(searchMetaParam.course, function(err, data) {
          toRender.allowedCourse = data;
          return cb(null, toRender);
        });
      }, function(toRender, cb) {
        return getMetaData(searchMetaParam.allergy, function(err, data) {
          toRender.allowedAllergy = data;
          return cb(null, toRender);
        });
      }, function(toRender, cb) {
        return getMetaData(searchMetaParam.diet, function(err, data) {
          toRender.allowedDiet = data;
          return cb(null, toRender);
        });
      }, function(toRender, cb) {
        return getRecipeData(function(err, data) {
          toRender.q = data.matches;
          return cb(null, toRender);
        });
      }
    ];
    return async.waterfall(tasks, function(err, result) {
      if (err) {
        return console.log("you have an error in your waterfall");
      } else {
        console.log("result", result);
        return res.render('yummly', result);
      }
    });
  };

}).call(this);
